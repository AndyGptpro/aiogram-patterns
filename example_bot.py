#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –±–æ—Ç–∞, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –ù–ï –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ –µ—Å—Ç—å - —ç—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç.

–î–ª—è –∑–∞–ø—É—Å–∫–∞:
1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=your_bot_token
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt
3. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_CHANNEL_ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python example_bot.py
"""

import asyncio
import logging
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
from keyboards.keyboard_factory import create_inline_keyboard
from fsm_states.survey_states import UserSurvey
from middlewares.subscription import ChannelSubscriptionMiddleware

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
YOUR_CHANNEL_ID = "@your_channel"  # –∏–ª–∏ -1001234567890

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher(storage=MemoryStorage())

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
# dp.message.middleware(ChannelSubscriptionMiddleware(channel_id=YOUR_CHANNEL_ID))


@dp.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    main_menu = create_inline_keyboard(
        width=2,
        # –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–¥—É—Ç –∫–Ω–æ–ø–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ callback_data
        "–ü—Ä–æ—Ñ–∏–ª—å", "–ü–æ–º–æ—â—å",
        # kwargs –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è callback_data
        –Ω–∞—Å—Ç—Ä–æ–π–∫–∏="settings_menu",
        –æ–ø—Ä–æ—Å="start_survey"
    )
    
    await message.answer(
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ aiogram 3.x.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )


@dp.callback_query(lambda c: c.data == "–ø—Ä–æ—Ñ–∏–ª—å")
async def profile_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'."""
    user = callback.from_user
    
    profile_info = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üë§ –ò–º—è: {user.full_name}\n"
        f"üîó Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üåê –Ø–∑—ã–∫: {user.language_code or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}"
    )
    
    back_keyboard = create_inline_keyboard(1, "üîô –ù–∞–∑–∞–¥", –Ω–∞–∑–∞–¥="back_to_menu")
    
    await callback.message.edit_text(profile_info, reply_markup=back_keyboard)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "–ø–æ–º–æ—â—å")
async def help_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'."""
    help_text = (
        "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã aiogram 3.x:\n\n"
        "‚Ä¢ <b>–§–∞–±—Ä–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä</b> - –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫\n"
        "‚Ä¢ <b>FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è</b> - –ø–æ—à–∞–≥–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏\n"
        "‚Ä¢ <b>Middleware</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
        "üìñ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: github.com/your-username/telegram-bot-patterns"
    )
    
    back_keyboard = create_inline_keyboard(1, "üîô –ù–∞–∑–∞–¥", –Ω–∞–∑–∞–¥="back_to_menu")
    
    await callback.message.edit_text(help_text, reply_markup=back_keyboard)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "start_survey")
async def start_survey_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    await callback.message.edit_text(
        "üìù <b>–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å!</b>\n\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.set_state(UserSurvey.waiting_for_name)
    await callback.answer()


@dp.message(UserSurvey.waiting_for_name)
async def process_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(name=message.text)
    
    await message.answer(
        f"üëã –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, <b>{message.text}</b>!\n\n"
        "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(UserSurvey.waiting_for_age)


@dp.message(UserSurvey.waiting_for_age)
async def process_age(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        age = int(message.text)
        if age <= 0 or age > 150:
            raise ValueError()
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        await state.update_data(age=age)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_keyboard = create_inline_keyboard(
            width=2,
            –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å="confirm_survey",
            –∑–∞–Ω–æ–≤–æ="restart_survey"
        )
        
        await message.answer(
            f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=confirm_keyboard
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.set_state(UserSurvey.waiting_for_confirmation)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 150)"
        )


@dp.callback_query(lambda c: c.data == "confirm_survey", UserSurvey.waiting_for_confirmation)
async def confirm_survey(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞."""
    data = await state.get_data()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    back_keyboard = create_inline_keyboard(1, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", –≥–ª–∞–≤–Ω–æ–µ_–º–µ–Ω—é="back_to_menu")
    
    await callback.message.edit_text(
        f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!</b>\n\n"
        f"üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age']} –ª–µ—Ç\n\n"
        f"‚ú® –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
        reply_markup=back_keyboard
    )
    await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


@dp.callback_query(lambda c: c.data == "restart_survey")
async def restart_survey(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å."""
    await state.clear()
    await start_survey_callback(callback, state)


@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await state.clear()
    
    main_menu = create_inline_keyboard(
        width=2,
        "–ü—Ä–æ—Ñ–∏–ª—å", "–ü–æ–º–æ—â—å",
        –Ω–∞—Å—Ç—Ä–æ–π–∫–∏="settings_menu",
        –æ–ø—Ä–æ—Å="start_survey"
    )
    
    await callback.message.edit_text(
        f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )
    await callback.answer()


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        # –£–¥–∞–ª—è–µ–º webhook (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º long polling
        logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not BOT_TOKEN:
            print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: BOT_TOKEN=your_bot_token")
            exit(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(main())
        
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
